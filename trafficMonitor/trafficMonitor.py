#!/bin/env python3.6

import pyshark
import requests
from time import ctime, sleep, gmtime, strftime
import pexpect
import json
import os
import smtplib


def sendEmail(host, subject, to_addr, from_addr, body_text):
    BODY = '\r\n'.join((
        'From: %s' % from_addr,
        'To: %s' % to_addr,
        'Subject: %s' % subject ,
        '',
        body_text
    ))
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, [to_addr], BODY)
    server.quit()


def createEmail(total, affected, unrecognized, affectedSource, probe, trigger):
    myhost    = os.uname()[1].split('.')[0]
    host      = 'email-server.example.com'
    subject   = 'TrafficMonitor verification results'
    to_addr   = 'to-addr@example.com'
    from_addr = 'from-addr@example.com'
    body_text = '\r\n'.join((
        'Hostname: %s' %(myhost),
        'Date & Time: %s' %(strftime('%a %d %b %Y %H:%M:%S UTC', gmtime())),
        '',
        'List of verified components: Probe',
        '',
        'Captured %s packets on %s.' % (total, probe),
        'Affected {} %, unrecognized {} % of packets.'.format(affected, unrecognized),
        'List of affected sources:', 
        'source - number of packets',
        '\r\n'.join([str(src[0]) + ' - ' + str(src[1]) for src in affectedSource]),
        '',
        '*** This email generated by trafficMonitor.py ***',
        '*** Please do not reply ***',
        ''
    ))
    print(body_text)
    if affected >= trigger:
        print(ctime(), 'Triggered. I will sent notification email on %s' % (to_addr))
        sendEmail(host, subject, to_addr, from_addr, body_text)
    else:
        print(ctime(), 'Looks good. I will not send a letter on %s' % (to_addr))


def createFailReport(probe, message):
    myhost    = os.uname()[1].split('.')[0]
    host      = 'email-server.example.com'
    subject   = 'TrafficMonitor verification results'
    to_addr   = 'to-addr@example.com'
    from_addr = 'from-addr@example.com'
    body_text = '\r\n'.join((
        'Hostname: %s' %(myhost),
        'Date & Time: %s' %(strftime('%a %d %b %Y %H:%M:%S UTC', gmtime())),
        '',
        'List of verified components: Probe',
        '',
        'Fail Report from %s.' % (probe),
        '',
        ' '.join(message),
        '',
        '*** This email generated by trafficMonitor.py ***',
        '*** Please do not reply ***',
        ''
    ))
    print(body_text)
    sendEmail(host, subject, to_addr, from_addr, body_text)


def loadFile(filename):
    f = open(filename, encoding=("utf-8"))
    Data = f.read()
    f.close()
    return Data


def createPcap(node, ip, pcap, interface):
    try:
        ssh   = 'ssh -o StrictHostKeyChecking=no root@%s' % ip
        child = pexpect.spawn(ssh)
        child.expect('#', timeout = 10)
        filterA = 'timeout 60 tcpdump -ntpi %s not arp and proto gre and not ip[40:2]==0x0806 and not ip[40:2]==0x0835 and ' % (interface)
        filterB = 'not ip[40:2]==0x8035 and not ip[36:2]==0x0806 and ip[6]==0 and ip[7]==0 -c 1000 -w /root/%s' % (pcap)
        filter  = filterA + filterB
        child.sendline(filter)
        child.expect('#', timeout = 70)
        # A = child.before.decode('utf-8')
        # print(A)
        statusCode = '200'
    except pexpect.TIMEOUT:
        message = 'Failed to connect via SSH'
        print(ctime(), message)
        # createFailReport(node, message.split(" "))
        statusCode = '500'
    finally:
        child.close()
        return statusCode

def downloadPcap(node, ip, pcap):
    try:
        scp = 'scp -o StrictHostKeyChecking=no root@%s:/root/%s .' % (ip, pcap)
        child = pexpect.spawn(scp)
        child.expect(pexpect.EOF, timeout = 300)
        statusCode = '200'
    except pexpect.TIMEOUT:
        message = 'Failed to connect via SSH'
        print(ctime(), message)
        # createFailReport(node, message.split(" "))
        statusCode = '500'
    finally:
        child.close()
        return statusCode


def deletePcap(node, ip, pcap):
    try:
        ssh   = 'ssh -o StrictHostKeyChecking=no root@%s' % ip
        child = pexpect.spawn(ssh)
        child.expect('#', timeout = 10)
        child.sendline('rm -f /root/%s' % pcap)
        child.expect('#', timeout = 10)
        statusCode = '200'
    except pexpect.TIMEOUT:
        message = 'Failed to connect via SSH'
        print(ctime(), message)
        # createFailReport(node, message.split(" "))
        statusCode = '500'
    finally:
        child.close()
        return statusCode

def RTlookUp(ip):
    url = 'http://some.stage.example.com/interfaces-search?q=ip~(%s)&fields=host_name&format=json' % ip
    try:
        req = requests.get(url, timeout=20)
        result = req.json()[0]['host_name']
    except Exception as e:
        print(ctime(), 'Fetching data from %s failed. Exception: %s' %(url, e))
        result = 'NONE'
    sleep(0.5)
    return result


def parserJob(node, pcap):
    capture      = pyshark.FileCapture(pcap)
    dictSRC      = {}
    dictDST      = {}
    dictSRCh     = {}
    dictDSTh     = {}
    i            = 1
    unrecognized = 0

    for pkt in capture:
        try:
            capturedLen    = 'NONE'
            layerFirstLen  = 'NONE'
            layerSecondLen = 'NONE'
            layerFirstSRC  = 'NONE'
            layerFirstDST  = 'NONE'            

            capturedLen    = int(pkt.captured_length)
            layerFirstLen  = int(pkt.layers[1].len)
            layerSecondLen = int(pkt.layers[4].len)
            layerFirstSRC  = str(pkt.layers[1].src_host)
            layerFirstDST  = str(pkt.layers[1].dst_host)
        except Exception as e:
            # if str(pkt.layers[4].proto_type.name) == 'arp.proto.type':
            #     print(ctime(), "Exception", e, "==== packet:", i, "====", "ARP catched")
            #     i += 1
            #     continue

            print(ctime(), 'Packet number:', i, "Triggered first exception:", e)
            ## Also works for ERSPAN (0x88be)
            try:
                for layer in pkt.layers:
                    if str(layer.layer_name) == 'erspan':
                        print(ctime(), 'Packet number:', i, "ERSPAN (0x88be) confirmed")
            except Exception as e:
                print(ctime(), "Exception", e)            

            try:
                capturedLen    = int(pkt.captured_length)
                layerFirstLen  = int(pkt.layers[1].len)
                layerFirstSRC  = str(pkt.layers[1].src_host)
                layerFirstDST  = str(pkt.layers[1].dst_host)
             
                for layer in pkt.layers:
                    if str(layer.layer_name) == 'malformed':
                        print(ctime(), 'Affected packet number %s in pcap' % i)
                        dictSRC.update({layerFirstSRC: int(dictSRC.get(layerFirstSRC, '0')) + 1})
                        dictDST.update({layerFirstDST: int(dictDST.get(layerFirstDST, '0')) + 1})
                i += 1
                continue

            except Exception as e:
                print("Exception", e)
                print("==== packet:", i, "====")
                print("Captured length:", capturedLen)
                print("First layer IP:", layerFirstLen)
                print("Second layer IP:", layerSecondLen)
                print("L1 SRC:", layerFirstSRC)
                print("L1 DST:", layerFirstDST)
                i += 1
                unrecognized += 1
                continue

        if layerSecondLen > capturedLen or layerSecondLen > layerFirstLen:   
            print(ctime(), 'Affected packet number %s in pcap' % i)
            dictSRC.update({layerFirstSRC: int(dictSRC.get(layerFirstSRC, '0')) + 1})
            dictDST.update({layerFirstDST: int(dictDST.get(layerFirstDST, '0')) + 1})
            i += 1
            continue

        for layer in pkt.layers:
            if str(layer.layer_name) == 'malformed':
                print(ctime(), 'Affected packet number %s in pcap' % i)
                dictSRC.update({layerFirstSRC: int(dictSRC.get(layerFirstSRC, '0')) + 1})
                dictDST.update({layerFirstDST: int(dictDST.get(layerFirstDST, '0')) + 1})
        i += 1
    capture.close()

    print('dictSRC =', dictSRC)
    print('dictDST =', dictDST)
    print(ctime(), node, 'Total packets:', i - 1)
    if dictSRC != {}:
        for ip, count in dictSRC.items():
            hostname = RTlookUp(ip)
            dictSRCh.update({hostname: count})
        # dictSRCh = sorted(dictSRCh.items(), key = lambda x: x[1], reverse=True)
    else:
        dictSRCh.update({node: 0})
    dictSRCh = sorted(dictSRCh.items(), key = lambda x: x[1], reverse=True)

    if dictDST != {}:
        for ip, count in dictDST.items():
            hostname = RTlookUp(ip)
            dictDSTh.update({hostname: count})
        dictDSTh = sorted(dictDSTh.items(), key = lambda x: x[1], reverse=True)
        print(ctime(), 'Affected', int(dictDSTh[0][1]*100/(i-1)),'% of packets on', dictDSTh[0][0], 'probe.')
    else:
        dictDSTh = [(node, 0)]
        # dictDSTh.update({node: 0})
        # dictDSTh = sorted(dictDSTh.items(), key = lambda x: x[1], reverse=True)
        # print('Affected', int(dictDSTh[0][1]*100/(i-1)),'% of packets on', dictDSTh[0][0], 'probe.')
        print(ctime(), 'No issue found.')

    print(ctime(), 'Unrecognized packets:', unrecognized, 'Unrecognized', int(unrecognized*100/(i - 1)), '% of packets in', pcap)    

    print('dictSRCh =', dictSRCh)
    print('dictDSTh =', dictDSTh)

    #       Total, % affected, % unrecognized, device stat (source - number of packets), probe    
    result = ((i - 1), int(dictDSTh[0][1]*100/(i-1)), int(unrecognized*100/(i - 1)), dictSRCh, dictDSTh[0][0])
    return result


def worker(node, ip, interface, pcap, trigger, attempt):
    attempt += 1
    print(ctime(), 'Attempt number:', attempt)
    if attempt > 3:
        message = 'Number of attempt exceeded. Failed to connect via SSH'
        print(ctime(), message, node, ip, pcap)
        createFailReport(node, message.split(" "))
        statusCode = '500'
        return statusCode
    try:
        print(ctime(), 'Starting createPcap:', node, ip, pcap)
        statusCode = createPcap(node, ip, pcap, interface)
        if statusCode != '200':
            print(ctime(), 'I\'m sleeping 5 minutes, awaiting next attempt.')
            sleep(300)
            statusCode = worker(node, ip, interface, pcap, trigger, attempt)
            return statusCode
        print(ctime(), 'Starting downloadPcap:', node, ip, pcap)
        statusCode = downloadPcap(node, ip, pcap)
        if statusCode != '200':
            print(ctime(), 'I\'m sleeping 5 minutes, awaiting next attempt.')
            sleep(300)
            statusCode = worker(node, ip, interface, pcap, trigger, attempt)
            return statusCode
        print(ctime(), 'Starting deletePcap:', node, ip, pcap)
        statusCode = deletePcap(node, ip, pcap)
        if statusCode != '200':
            print(ctime(), 'I\'m sleeping 5 minutes, awaiting next attempt.')
            sleep(300)
            statusCode = worker(node, ip, interface, pcap, trigger, attempt)
            return statusCode
        print(ctime(), 'Starting parserJob:', pcap)
        total, affected, unrecognized, affectedSource, probe = parserJob(node, pcap)
        print(ctime(), 'Completed parserJob:', pcap)
        createEmail(total, affected, unrecognized, affectedSource, probe, trigger)
    except Exception as e:
        print(ctime(), "Exception:", e)
        createFailReport(node, e)
    finally:
        return statusCode


def main():
    path = '/opt/trafficMonitor/'
    os.chdir(path)
    print("Path", path)
    print("Current work directory: ", os.getcwd())

    try:
        node = 'Node Not Defined'
        print(ctime(), 'Loading configuration from trafficMonitor_config.json file.')
        config = json.loads(loadFile('trafficMonitor_config.json'))
        print(json.dumps(config, sort_keys=True, indent=4))

        gpcap   = config['global']['pcap']
        trigger = config['global']['trigger']
        attempt = 0
        
        for n in config['nodes']:
            # date      = strftime('%Y-%m-%dT%H_%M_%S-UTC', gmtime())
            pcap      = n['node'] + '_' + gpcap
            node      = n['node']
            ip        = n['ip']
            interface = n['interface']
            print(node, ip, interface, pcap)
            statusCode = worker(node, ip, interface, pcap, trigger, attempt)
            print(ctime(), node, "StatusCode:", statusCode)
    except Exception as e:
        message = 'Failed to load configuration from trafficMonitor_config.json file.'
        print(ctime(), message)
        print(ctime(), "Exception:", e)
        createFailReport(node, message.split(" "))


if __name__ == '__main__':
    main()
